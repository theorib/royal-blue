name: Royal Blue CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-tests:
    name: Run Python tests, check test coverage, check formatting and security scan
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout Github repo
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.8"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run uv sync
        run: uv sync --frozen

      - name: Run Ruff Lint
        run: uv run ruff check --fix --output-format=github .

      - name: Run Ruff Format
        run: uv run ruff format --verbose .

      - name: Run Tests with Coverage
        env:
          TOTESYS_DB_USER: ${{secrets.TOTESYS_DB_USER}}
          TOTESYS_DB_PASSWORD: ${{secrets.TOTESYS_DB_PASSWORD}}
          TOTESYS_DB_HOST: ${{secrets.TOTESYS_DB_HOST}}
          TOTESYS_DB_DATABASE: ${{secrets.TOTESYS_DB_DATABASE}}
          TOTESYS_DB_PORT: ${{secrets.TOTESYS_DB_PORT}}
          DATAWAREHOUSE_USER: ${{secrets.DATAWAREHOUSE_USER}}
          DATAWAREHOUSE_PASSWORD: ${{secrets.DATAWAREHOUSE_PASSWORD}}
          DATAWAREHOUSE_HOST: ${{secrets.DATAWAREHOUSE_HOST}}
          DATAWAREHOUSE_DATABASE: ${{secrets.DATAWAREHOUSE_DATABASE}}
          DATAWAREHOUSE_PORT: ${{secrets.DATAWAREHOUSE_PORT}}
        run: uv run pytest --cov=src tests/

      - name: Run Bandit Security Scan
        run: uv run bandit -r -lll src
  
  deploy-terraform:
    # if: github.event_name == 'workflow_dispatch'
    name: Deploy Royal Blue Terraform infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Github repo
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.8"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run uv sync
        run: uv sync --frozen

      - name: Create Lambda Layer bundle
        run: uv run ./build_lambda_layer.sh

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
      
      - name: run pre-terraform build scripts
        run: ./build_extract_lambda_zip.sh |
          ./build_lambda_layer.sh |
          ./build_transform_lambda_zip.sh
      - name: terraform format
        working-directory: terraform
        run: terraform fmt -recursive
      - name: terraform init
        working-directory: terraform
        run: terraform init
      - name: terraform plan
        working-directory: terraform
        env:
          TF_VAR_TOTESYS_DB_USER: ${{secrets.TOTESYS_DB_USER}}
          TF_VAR_TOTESYS_DB_PASSWORD: ${{secrets.TOTESYS_DB_PASSWORD}}
          TF_VAR_TOTESYS_DB_HOST: ${{secrets.TOTESYS_DB_HOST}}
          TF_VAR_TOTESYS_DB_DATABASE: ${{secrets.TOTESYS_DB_DATABASE}}
          TF_VAR_TOTESYS_DB_PORT: ${{secrets.TOTESYS_DB_PORT}}
          TF_VAR_DATAWAREHOUSE_USER: ${{secrets.DATAWAREHOUSE_USER}}
          TF_VAR_DATAWAREHOUSE_PASSWORD: ${{secrets.DATAWAREHOUSE_PASSWORD}}
          TF_VAR_DATAWAREHOUSE_HOST: ${{secrets.DATAWAREHOUSE_HOST}}
          TF_VAR_DATAWAREHOUSE_DATABASE: ${{secrets.DATAWAREHOUSE_DATABASE}}
          TF_VAR_DATAWAREHOUSE_PORT: ${{secrets.DATAWAREHOUSE_PORT}}
        run: terraform plan -out=tfplan
      - name: terraform apply
        working-directory: terraform
        env:
          TF_VAR_TOTESYS_DB_USER: ${{secrets.TOTESYS_DB_USER}}
          TF_VAR_TOTESYS_DB_PASSWORD: ${{secrets.TOTESYS_DB_PASSWORD}}
          TF_VAR_TOTESYS_DB_HOST: ${{secrets.TOTESYS_DB_HOST}}
          TF_VAR_TOTESYS_DB_DATABASE: ${{secrets.TOTESYS_DB_DATABASE}}
          TF_VAR_TOTESYS_DB_PORT: ${{secrets.TOTESYS_DB_PORT}}
          TF_VAR_DATAWAREHOUSE_USER: ${{secrets.DATAWAREHOUSE_USER}}
          TF_VAR_DATAWAREHOUSE_PASSWORD: ${{secrets.DATAWAREHOUSE_PASSWORD}}
          TF_VAR_DATAWAREHOUSE_HOST: ${{secrets.DATAWAREHOUSE_HOST}}
          TF_VAR_DATAWAREHOUSE_DATABASE: ${{secrets.DATAWAREHOUSE_DATABASE}}
          TF_VAR_DATAWAREHOUSE_PORT: ${{secrets.DATAWAREHOUSE_PORT}}
        run: terraform apply -auto-approve tfplan